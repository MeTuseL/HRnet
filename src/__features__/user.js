import { createSlice } from '@reduxjs/toolkit'
import { users as usersMocked } from '../__mock__/users'

/**
 * Initial state for the user information slice.
 *
 * @category Redux Slice
 * @namespace userSlice
 * @property {Object} user - Object containing user information.
 * @property {string|null} user.email - User's email address.
 * @property {string|null} user.firstName - User's first name.
 * @property {string|null} user.lastName - User's last name.
 * @property {string|null} user.createdAt - Timestamp of user creation.
 * @property {string|null} user.updatedAt - Timestamp of last user update.
 * @property {string|null} user.id - User's ID.
 * @property {Object} tokenUser - Object containing user token.
 * @property {string|null} tokenUser.token - User's token.
 * @property {Object} remember - Object for remembering user state.
 * @property {boolean} remember.checked - Indicates if user state is remembered.
 */
const initialState = {
    user: {
        id: null,
        firstName: null,
        lastName: null,
        startDate: null,
        department: null,
        dateOfBirth: null,
        street: null,
        city: null,
        state: {
            name: null,
            abbreviation: null,
        },
        zipCode: null,
    },
    users: [...usersMocked],
}
/**
 * Redux slice for user information and authentication.
 *
 * @category Redux Slice
 * @namespace userSlice
 */
export const userSlice = createSlice({
    name: 'user',
    initialState,

    reducers: {
        /**
         * Create user.
         *
         * @function
         * @memberOf userSlice
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        createUser: (state, action) => {
            state.user = {
                ...state.user,
                id: action.payload.id,
                firstName: action.payload.firstName,
                lastName: action.payload.lastName,
                startDate: action.payload.startDate,
                department: action.payload.department,
                dateOfBirth: action.payload.dateOfBirth,
                street: action.payload.street,
                city: action.payload.city,
                state: {
                    name: action.payload.state.name,
                    abbreviation: action.payload.state.abbreviation,
                },
                zipCode: action.payload.zipCode,
            }
        },
        /**
         * Updates list of users.
         *
         * @function
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        updateListUsers: (state, action) => {
            state.users.push(state.user)
        },
        /**
         * Reset user information.
         *
         * @function
         * @memberOf userSlice
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        resetUser: (state) => {
            state.user = {
                ...state.user,
                id: null,
                firstName: null,
                lastName: null,
                startDate: null,
                department: null,
                dateOfBirth: null,
                street: null,
                city: null,
                state: {
                    name: null,
                    abbreviation: null,
                },
                zipCode: null,
            }
        },
    },
})

/**
 * Actions generated by userSlice.
 *
 * @category Redux Slice
 * @namespace userSlice
 * @type {Object}
 */
export const { createUser, updateListUsers, resetUser } = userSlice.actions

/**
 * Selector function to  list of user's from state.
 *
 * @category Redux Selector
 * @param {Object} state - Redux state object.
 * @returns {Object} List of user's.
 */
export const selectListUsers = (state) => state.userInfos.users

/**
 * Reducer function for userSlice.
 *
 * @category Redux Reducer
 * @namespace userSlice
 * @type {Function}
 */
export default userSlice.reducer
